version: "3.7"

services:
  traefik:
    image: "traefik:v2.2"
    container_name: "edge_mhp"
    command:
      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
      # - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - --log.level=DEBUG # <== Setting the level of the logs from traefik
      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
      # - --providers.file.filename=/dynamic.yaml # <== Referring to a dynamic configuration file
      - --providers.docker.network=web # <== Operate on the docker network named web

      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
      - --entrypoints.websecure.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured

      # CA server to use.
      # Uncomment the line to use Let's Encrypt's staging server,
      # leave commented to go to prod.
      # Default: "https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=developer.rakeshpaul@gmail.com"
      # command to remove existing acme.json docker exec -it edge_mhp rm /letsencrypt/acme.json
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"

      # - "--certificatesResolvers.myresolver.acme.httpChallenge=true"
      # - "--certificatesResolvers.myresolver.acme.httpChallenge.entryPoint=web"
      # Use a HTTP-01 ACME challenge.
      # Optional
      # EntryPoint to use for the HTTP-01 challenges.
      # Required
      # - --certificatesResolvers.myresolver.acme.httpChallenge.entryPoint=web
      # Use a DNS-01 ACME challenge rather than HTTP-01 challenge.
      # Note: mandatory for wildcard certificate generation.
      # Optional
      # - --certificatesResolvers.myresolver.acme.dnsChallenge=true
      # DNS provider used.
      # Required
      # - --certificatesResolvers.myresolver.acme.dnsChallenge.provider=digitalocean

    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - web # <== Placing traefik on the network named web, to access containers on this network
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      - "traefik.http.routers.api.rule=Host(`monitor.myhistoryproject.com`)" # <== Setting the domain for the dashboard
      - "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access
      - "traefik.http.routers.api.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$hrkKhFHi$$bfNjb7QIicPxMJcITaQAF1"

      # Redirect all HTTP to HTTPS permanently
      - traefik.http.routers.http_catchall.rule=HostRegexp(`{any:.+}`)
      - traefik.http.routers.http_catchall.entrypoints=web
      - traefik.http.routers.http_catchall.middlewares=https_redirect
      - traefik.http.middlewares.https_redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https_redirect.redirectscheme.permanent=true

  webapp:
    build: ../web/
    container_name: webapp_mhp
    restart: always
    ports:
      - "3000:3000"
    labels:
      - "traefik.port=3000"
      - "traefik.enable=true"
      - "traefik.http.routers.webapp.rule=Host(`genesis.dev`)"
      - "traefik.http.routers.webapp.entrypoints=websecure"
      - "traefik.http.routers.webapp.tls.certresolver=myresolver"
    depends_on:
      - "nest"
      - "hasura"
    networks:
      - web
      - backend
  nest:
    build: ../api/
    container_name: api_mhp
    restart: always
    ports:
      - "4000:4000"
    # command: "npm run start"
    depends_on:
      - "postgres"
      - "redis"
    labels:
      # - "traefik.docker.network=traefik_default"
      - "traefik.port=4000"
      - "traefik.enable=true"
      - "traefik.http.routers.nest.rule=Host(`api.genesis.dev`)"
      - "traefik.http.routers.nest.entrypoints=websecure"
      - "traefik.http.routers.nest.tls.certresolver=myresolver"
    networks:
      - web
      - backend
  redis:
    image: redis:alpine
    container_name: redis_mhp
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    environment:
      name: ${REDIS_NAME}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/var/lib/redis/mhp/data
    labels:
      - "traefik.enable=false"
    networks:
      - backend
  # end::redis[]
  # tag::postgres[]
  postgres:
    image: mdillon/postgis:latest
    # image: postgres
    container_name: postgres_mhp
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - db_data:/var/lib/postgresql/mhp/data
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    labels:
      - "traefik.enable=false"
    networks:
      - backend
  # end::postgres[]
  # tag::hasura[]
  hasura:
    image: hasura/graphql-engine:v1.2.2
    container_name: hasura_mhp
    ports:
      - ${HASURA_GRAPHQL_SERVER_PORT}:${HASURA_GRAPHQL_SERVER_PORT}
    depends_on:
      - "postgres"
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: ${HASURA_GRAPHQL_ENABLE_CONSOLE:-true} # set to "false" to disable console
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-mhp@Xtrios}
      HASURA_GRAPHQL_SERVER_PORT: ${HASURA_GRAPHQL_SERVER_PORT:-8080}
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256","key":"${HASURA_GRAPHQL_JWT_SECRET}"}'
      # HASURA_GRAPHQL_AUTH_HOOK: ${HASURA_GRAPHQL_AUTH_HOOK:-http://localhost:4000/auth/hasura}
      # HASURA_GRAPHQL_AUTH_HOOK_MODE: ${HASURA_GRAPHQL_AUTH_HOOK_MODE:-POST}
      HASURA_GRAPHQL_CORS_DOMAIN: ${HASURA_GRAPHQL_CORS_DOMAIN:-https://*.myhistoryproject.com,http://*.myhistoryproject.com}
      HASURA_GRAPHQL_CUSTOM_API: ${HASURA_GRAPHQL_CUSTOM_API:-http://localhost:4000/graphql}

    labels:
      - "traefik.port=9091"
      - "traefik.enable=true"
      - "traefik.http.routers.hasura.rule=Host(`hasura.genesis.dev`)"
      - "traefik.http.routers.hasura.entrypoints=websecure"
      - "traefik.http.routers.hasura.tls.certresolver=myresolver"
    networks:
      - web
      - backend
volumes:
  db_data:
  redis_data:
networks:
  web:
    external: true
  backend:
    external: false
